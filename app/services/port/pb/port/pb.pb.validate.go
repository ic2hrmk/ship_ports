// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/port/pb.proto

package port

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on SavePortRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SavePortRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SavePortRequestValidationError{
				field:  "Port",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SavePortRequestValidationError is the validation error returned by
// SavePortRequest.Validate if the designated constraints aren't met.
type SavePortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SavePortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SavePortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SavePortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SavePortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SavePortRequestValidationError) ErrorName() string { return "SavePortRequestValidationError" }

// Error satisfies the builtin error interface
func (e SavePortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSavePortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SavePortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SavePortRequestValidationError{}

// Validate checks the field values on SavePortResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SavePortResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SavePortResponseValidationError is the validation error returned by
// SavePortResponse.Validate if the designated constraints aren't met.
type SavePortResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SavePortResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SavePortResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SavePortResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SavePortResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SavePortResponseValidationError) ErrorName() string { return "SavePortResponseValidationError" }

// Error satisfies the builtin error interface
func (e SavePortResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSavePortResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SavePortResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SavePortResponseValidationError{}

// Validate checks the field values on GetPortsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPortsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// GetPortsRequestValidationError is the validation error returned by
// GetPortsRequest.Validate if the designated constraints aren't met.
type GetPortsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPortsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPortsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPortsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPortsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPortsRequestValidationError) ErrorName() string { return "GetPortsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPortsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPortsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPortsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPortsRequestValidationError{}

// Validate checks the field values on GetPortsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPortsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPortsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPortsResponseValidationError is the validation error returned by
// GetPortsResponse.Validate if the designated constraints aren't met.
type GetPortsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPortsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPortsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPortsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPortsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPortsResponseValidationError) ErrorName() string { return "GetPortsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPortsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPortsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPortsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPortsResponseValidationError{}

// Validate checks the field values on PortEntity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PortEntity) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PortEntityValidationError is the validation error returned by
// PortEntity.Validate if the designated constraints aren't met.
type PortEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortEntityValidationError) ErrorName() string { return "PortEntityValidationError" }

// Error satisfies the builtin error interface
func (e PortEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortEntityValidationError{}
